{"ast":null,"code":"import { ADD_FAVORITE, DELETE_FAVORITE, FILTER, ORDER } from \"./action-types\";\nconst initialState = {\n  myFavorites: [],\n  //allCharacters: [],\n  allFavs: [],\n  filterOption: \"All\" // Agrega un estado para la opción de Filtro ALL\n};\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  // En lugar de pasarle type y payload por destructuring, puedo pasarle action directamente\n  switch (type) {\n    // Si no hago destructuring arriba, acá viene action.type\n    case ADD_FAVORITE:\n      return {\n        ...state,\n        myFavorites: [...state.myFavorites, payload],\n        // Si no hago destructuring en el reducer, acá viene action.payload\n        //allCharacters: [...state.myFavorites], // allCharacters hace una copia del estado myFavorites para que al aplicar el filtrado/ordenamiento no me pise el estado myFavorites.\n        allFavs: [...state.allFavs, payload] //Acá tenía state.myFavorites y funcionaba\n      };\n\n    case DELETE_FAVORITE:\n      return {\n        ...state,\n        myFavorites: state.myFavorites.filter(char => char.id !== payload),\n        // Si no hago destructuring en el reducer, acá viene action.payload\n        allFavs: state.allFavs.filter(char => char.id !== payload)\n      };\n    case FILTER:\n      //const { allCharacters } = state; //Hago una copia del estado allCharacters mediante destructuring para no tener que estar escribiendo state.allCharacters varias veces. Dai lo sacó porque nos va a generar problemar en ORDER\n      const filterOption = payload;\n      const allCharsFiltered = filterOption === \"All\" ? state.allFavs //Acá tenía myFavorites\n      : state.allFavs.filter(char => char.gender === payload); // myFavorites\n      return {\n        ...state,\n        filterOption,\n        myFavorites: allCharsFiltered //antes era allFavs en vez de myFavorites\n      };\n\n    case ORDER:\n      const orderedFavorites = [...state.myFavorites];\n      return {\n        ...state,\n        myFavorites: payload === \"Ascendente\" ? orderedFavorites.sort((a, b) => a.id > b.id ? 1 : -1) : payload === \"Descendente\" ? orderedFavorites.sort((a, b) => a.id > b.id ? -1 : 1) : orderedFavorites //state.myFavorites\n      };\n\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default reducer;","map":{"version":3,"names":["ADD_FAVORITE","DELETE_FAVORITE","FILTER","ORDER","initialState","myFavorites","allFavs","filterOption","reducer","state","arguments","length","undefined","type","payload","filter","char","id","allCharsFiltered","gender","orderedFavorites","sort","a","b"],"sources":["C:/Users/Diego/Desktop/rick_and_morty_final/front/src/redux/reducer.js"],"sourcesContent":["import { ADD_FAVORITE, DELETE_FAVORITE, FILTER, ORDER } from \"./action-types\";\r\n\r\nconst initialState = {\r\n    myFavorites: [],\r\n    //allCharacters: [],\r\n    allFavs: [],\r\n    filterOption: \"All\" // Agrega un estado para la opción de Filtro ALL\r\n}\r\n\r\nconst reducer = (state = initialState, {type, payload}) => { // En lugar de pasarle type y payload por destructuring, puedo pasarle action directamente\r\n    switch(type){ // Si no hago destructuring arriba, acá viene action.type\r\n        case ADD_FAVORITE:\r\n            return {\r\n                ...state,\r\n                myFavorites: [...state.myFavorites, payload], // Si no hago destructuring en el reducer, acá viene action.payload\r\n                //allCharacters: [...state.myFavorites], // allCharacters hace una copia del estado myFavorites para que al aplicar el filtrado/ordenamiento no me pise el estado myFavorites.\r\n                allFavs: [...state.allFavs, payload] //Acá tenía state.myFavorites y funcionaba\r\n        };\r\n        \r\n        case DELETE_FAVORITE:\r\n            return{\r\n                ...state,\r\n                myFavorites: state.myFavorites.filter(char => char.id !== payload), // Si no hago destructuring en el reducer, acá viene action.payload\r\n                allFavs: state.allFavs.filter(char => char.id !== payload)\r\n        };\r\n\r\n        case FILTER:\r\n            //const { allCharacters } = state; //Hago una copia del estado allCharacters mediante destructuring para no tener que estar escribiendo state.allCharacters varias veces. Dai lo sacó porque nos va a generar problemar en ORDER\r\n            const filterOption = payload;\r\n            const allCharsFiltered = filterOption === \"All\"\r\n            ? state.allFavs //Acá tenía myFavorites\r\n            : state.allFavs.filter(char => char.gender === payload) // myFavorites\r\n            return{\r\n                ...state,\r\n                filterOption,\r\n                myFavorites: allCharsFiltered, //antes era allFavs en vez de myFavorites\r\n            };\r\n            \r\n        case ORDER:\r\n            const orderedFavorites = [...state.myFavorites];\r\n            return{\r\n                ...state,\r\n                myFavorites: \r\n                    payload === \"Ascendente\"\r\n                    ? orderedFavorites.sort((a, b) => a.id > b.id ? 1 : - 1)\r\n                    : payload === \"Descendente\"\r\n                    ? orderedFavorites.sort((a, b) => a.id > b.id ? -1 : 1)\r\n                    : orderedFavorites //state.myFavorites\r\n            }\r\n\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\nexport default reducer;"],"mappings":"AAAA,SAASA,YAAY,EAAEC,eAAe,EAAEC,MAAM,EAAEC,KAAK,QAAQ,gBAAgB;AAE7E,MAAMC,YAAY,GAAG;EACjBC,WAAW,EAAE,EAAE;EACf;EACAC,OAAO,EAAE,EAAE;EACXC,YAAY,EAAE,KAAK,CAAC;AACxB,CAAC;;AAED,MAAMC,OAAO,GAAG,SAAAA,CAAA,EAA2C;EAAA,IAA1CC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGN,YAAY;EAAA,IAAE;IAACS,IAAI;IAAEC;EAAO,CAAC,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAO;EACzD,QAAOC,IAAI;IAAG;IACV,KAAKb,YAAY;MACb,OAAO;QACH,GAAGS,KAAK;QACRJ,WAAW,EAAE,CAAC,GAAGI,KAAK,CAACJ,WAAW,EAAES,OAAO,CAAC;QAAE;QAC9C;QACAR,OAAO,EAAE,CAAC,GAAGG,KAAK,CAACH,OAAO,EAAEQ,OAAO,CAAC,CAAC;MAC7C,CAAC;;IAED,KAAKb,eAAe;MAChB,OAAM;QACF,GAAGQ,KAAK;QACRJ,WAAW,EAAEI,KAAK,CAACJ,WAAW,CAACU,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKH,OAAO,CAAC;QAAE;QACpER,OAAO,EAAEG,KAAK,CAACH,OAAO,CAACS,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKH,OAAO;MACjE,CAAC;IAED,KAAKZ,MAAM;MACP;MACA,MAAMK,YAAY,GAAGO,OAAO;MAC5B,MAAMI,gBAAgB,GAAGX,YAAY,KAAK,KAAK,GAC7CE,KAAK,CAACH,OAAO,CAAC;MAAA,EACdG,KAAK,CAACH,OAAO,CAACS,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACG,MAAM,KAAKL,OAAO,CAAC,EAAC;MACxD,OAAM;QACF,GAAGL,KAAK;QACRF,YAAY;QACZF,WAAW,EAAEa,gBAAgB,CAAE;MACnC,CAAC;;IAEL,KAAKf,KAAK;MACN,MAAMiB,gBAAgB,GAAG,CAAC,GAAGX,KAAK,CAACJ,WAAW,CAAC;MAC/C,OAAM;QACF,GAAGI,KAAK;QACRJ,WAAW,EACPS,OAAO,KAAK,YAAY,GACtBM,gBAAgB,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACL,EAAE,GAAGM,CAAC,CAACN,EAAE,GAAG,CAAC,GAAG,CAAE,CAAC,CAAC,GACtDH,OAAO,KAAK,aAAa,GACzBM,gBAAgB,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACL,EAAE,GAAGM,CAAC,CAACN,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GACrDG,gBAAgB,CAAC;MAC3B,CAAC;;IAEL;MACI,OAAO;QAAC,GAAGX;MAAK,CAAC;EACzB;AACJ,CAAC;AAGD,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}