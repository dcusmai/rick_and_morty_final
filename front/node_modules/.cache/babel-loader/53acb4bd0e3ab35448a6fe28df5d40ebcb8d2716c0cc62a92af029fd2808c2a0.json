{"ast":null,"code":"import { ADD_FAVORITE, DELETE_FAVORITE, FILTER, ORDER } from \"./action-types\";\nconst initialState = {\n  myFavorites: [],\n  //allCharacters: [],\n  allFavs: []\n};\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  // En lugar de pasarle type y payload por destructuring, puedo pasarle action directamente\n  switch (type) {\n    // Si no hago destructuring arriba, acá viene action.type\n    case ADD_FAVORITE:\n      return {\n        ...state,\n        myFavorites: [...state.myFavorites, payload],\n        // Si no hago destructuring en el reducer, acá viene action.payload\n        //allCharacters: [...state.myFavorites], // allCharacters hace una copia del estado myFavorites para que al aplicar el filtrado/ordenamiento no me pise el estado myFavorites.\n        allFavs: [...state.myFavorites, payload]\n      };\n    case DELETE_FAVORITE:\n      return {\n        ...state,\n        myFavorites: state.myFavorites.filter(char => char.id !== payload),\n        // Si no hago destructuring en el reducer, acá viene action.payload\n        allFavs: state.allFavs.filter(char => char.id !== payload)\n      };\n    case FILTER:\n      //const { allCharacters } = state; //Hago una copia del estado allCharacters mediante destructuring para no tener que estar escribiendo state.allCharacters varias veces. Dai lo sacó porque nos va a generar problemar en ORDER\n      const allCharsFiltered = state.myFavorites.filter(char => char.gender === payload);\n      return {\n        ...state,\n        allFavs: allCharsFiltered\n      };\n    case ORDER:\n      const allCharacters = [...state.myFavorites];\n      return {\n        ...state,\n        myFavorites: payload === \"Ascendente\" ? allCharacters.sort((a, b) => a.id > b.id ? 1 : -1) : payload === \"Descendente\" ? allCharacters.sort((a, b) => a.id > b.id ? -1 : 1) : state.allFavs\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default reducer;","map":{"version":3,"names":["ADD_FAVORITE","DELETE_FAVORITE","FILTER","ORDER","initialState","myFavorites","allFavs","reducer","state","arguments","length","undefined","type","payload","filter","char","id","allCharsFiltered","gender","allCharacters","sort","a","b"],"sources":["C:/Users/Diego/Desktop/rick_and_morty_final/src/redux/reducer.js"],"sourcesContent":["import { ADD_FAVORITE, DELETE_FAVORITE, FILTER, ORDER } from \"./action-types\";\r\n\r\nconst initialState = {\r\n    myFavorites: [],\r\n    //allCharacters: [],\r\n    allFavs: []\r\n}\r\n\r\nconst reducer = (state = initialState, {type, payload}) => { // En lugar de pasarle type y payload por destructuring, puedo pasarle action directamente\r\n    switch(type){ // Si no hago destructuring arriba, acá viene action.type\r\n        case ADD_FAVORITE:\r\n            return {\r\n                ...state,\r\n                myFavorites: [...state.myFavorites, payload], // Si no hago destructuring en el reducer, acá viene action.payload\r\n                //allCharacters: [...state.myFavorites], // allCharacters hace una copia del estado myFavorites para que al aplicar el filtrado/ordenamiento no me pise el estado myFavorites.\r\n                allFavs: [...state.myFavorites, payload]\r\n        };\r\n        \r\n        case DELETE_FAVORITE:\r\n            return{\r\n                ...state,\r\n                myFavorites: state.myFavorites.filter(char => char.id !== payload), // Si no hago destructuring en el reducer, acá viene action.payload\r\n                allFavs: state.allFavs.filter(char => char.id !== payload)\r\n        };\r\n\r\n        case FILTER:\r\n            //const { allCharacters } = state; //Hago una copia del estado allCharacters mediante destructuring para no tener que estar escribiendo state.allCharacters varias veces. Dai lo sacó porque nos va a generar problemar en ORDER\r\n            const allCharsFiltered = state.myFavorites.filter(char => char.gender === payload)\r\n            return{\r\n                ...state,\r\n                allFavs: allCharsFiltered\r\n            };\r\n            \r\n        case ORDER:\r\n            const allCharacters = [...state.myFavorites];\r\n            return{\r\n                ...state,\r\n                myFavorites: \r\n                    payload === \"Ascendente\"\r\n                    ? allCharacters.sort((a, b) => a.id > b.id ? 1 : - 1)\r\n                    : payload === \"Descendente\"\r\n                    ? allCharacters.sort((a, b) => a.id > b.id ? -1 : 1)\r\n                    : state.allFavs\r\n            }\r\n\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\n\r\nexport default reducer;"],"mappings":"AAAA,SAASA,YAAY,EAAEC,eAAe,EAAEC,MAAM,EAAEC,KAAK,QAAQ,gBAAgB;AAE7E,MAAMC,YAAY,GAAG;EACjBC,WAAW,EAAE,EAAE;EACf;EACAC,OAAO,EAAE;AACb,CAAC;AAED,MAAMC,OAAO,GAAG,SAAAA,CAAA,EAA2C;EAAA,IAA1CC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGL,YAAY;EAAA,IAAE;IAACQ,IAAI;IAAEC;EAAO,CAAC,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAO;EACzD,QAAOC,IAAI;IAAG;IACV,KAAKZ,YAAY;MACb,OAAO;QACH,GAAGQ,KAAK;QACRH,WAAW,EAAE,CAAC,GAAGG,KAAK,CAACH,WAAW,EAAEQ,OAAO,CAAC;QAAE;QAC9C;QACAP,OAAO,EAAE,CAAC,GAAGE,KAAK,CAACH,WAAW,EAAEQ,OAAO;MAC/C,CAAC;IAED,KAAKZ,eAAe;MAChB,OAAM;QACF,GAAGO,KAAK;QACRH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACS,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKH,OAAO,CAAC;QAAE;QACpEP,OAAO,EAAEE,KAAK,CAACF,OAAO,CAACQ,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKH,OAAO;MACjE,CAAC;IAED,KAAKX,MAAM;MACP;MACA,MAAMe,gBAAgB,GAAGT,KAAK,CAACH,WAAW,CAACS,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACG,MAAM,KAAKL,OAAO,CAAC;MAClF,OAAM;QACF,GAAGL,KAAK;QACRF,OAAO,EAAEW;MACb,CAAC;IAEL,KAAKd,KAAK;MACN,MAAMgB,aAAa,GAAG,CAAC,GAAGX,KAAK,CAACH,WAAW,CAAC;MAC5C,OAAM;QACF,GAAGG,KAAK;QACRH,WAAW,EACPQ,OAAO,KAAK,YAAY,GACtBM,aAAa,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACL,EAAE,GAAGM,CAAC,CAACN,EAAE,GAAG,CAAC,GAAG,CAAE,CAAC,CAAC,GACnDH,OAAO,KAAK,aAAa,GACzBM,aAAa,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACL,EAAE,GAAGM,CAAC,CAACN,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAClDR,KAAK,CAACF;MAChB,CAAC;IAEL;MACI,OAAO;QAAC,GAAGE;MAAK,CAAC;EACzB;AACJ,CAAC;AAGD,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}