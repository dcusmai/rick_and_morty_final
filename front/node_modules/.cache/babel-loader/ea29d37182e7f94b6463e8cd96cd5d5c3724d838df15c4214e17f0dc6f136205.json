{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Diego\\\\Desktop\\\\rick_and_morty_final\\\\src\\\\components\\\\Cards.jsx\";\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Cards(_ref) {\n  let {\n    characters,\n    onClose\n  } = _ref;\n  // [{...}, {...}, {...}] characters es un array de objetos que viene de data, pasado como propiedad por App a Cards.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: characters.map(_ref2 => {\n      let {\n        id,\n        name,\n        species,\n        gender,\n        image\n      } = _ref2;\n      // el método map recorre cada character (que son objetos dentro del arr characters). Entonces podemos hacer destructuring de las propiedades de character. Antes: characters.map((character) => {...}). Uso map y no forEach, porque map me retorna automáticamente un nuevo array por cada character, en cambio forEach no retorna nada.\n      return /*#__PURE__*/_jsxDEV(Card, {\n        name: name // Si no hubiéramos hecho destructurin, acá debería quedar: name={character.name} y así con todos los demás.\n        ,\n        species: species,\n        gender: gender,\n        image: image,\n        onClose: () => onClose(id) // onClose no está en Characters, así que no lo puedo traer, hago una fc acá.\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 19\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 4\n  }, this);\n}\n_c = Cards;\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["Card","jsxDEV","_jsxDEV","Cards","_ref","characters","onClose","children","map","_ref2","id","name","species","gender","image","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Diego/Desktop/rick_and_morty_final/src/components/Cards.jsx"],"sourcesContent":[" import Card from './Card';\r\n\r\nfunction Cards({ characters, onClose }) { // [{...}, {...}, {...}] characters es un array de objetos que viene de data, pasado como propiedad por App a Cards.\r\n   \r\n   return (\r\n   <div>\r\n      {\r\n         characters.map(({id, name, species, gender, image}) => { // el método map recorre cada character (que son objetos dentro del arr characters). Entonces podemos hacer destructuring de las propiedades de character. Antes: characters.map((character) => {...}). Uso map y no forEach, porque map me retorna automáticamente un nuevo array por cada character, en cambio forEach no retorna nada.\r\n           return <Card\r\n           key={id} \r\n           name={name} // Si no hubiéramos hecho destructurin, acá debería quedar: name={character.name} y así con todos los demás.\r\n           species={species}\r\n           gender={gender}\r\n           image={image}\r\n           onClose={() => onClose(id)} // onClose no está en Characters, así que no lo puedo traer, hago una fc acá.\r\n           ></Card>\r\n         })\r\n      }\r\n   </div>\r\n   )\r\n}\r\n\r\nexport default Cards;\r\n"],"mappings":";AAAC,OAAOA,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,KAAKA,CAAAC,IAAA,EAA0B;EAAA,IAAzB;IAAEC,UAAU;IAAEC;EAAQ,CAAC,GAAAF,IAAA;EAAI;;EAEvC,oBACAF,OAAA;IAAAK,QAAA,EAEMF,UAAU,CAACG,GAAG,CAACC,KAAA,IAAwC;MAAA,IAAvC;QAACC,EAAE;QAAEC,IAAI;QAAEC,OAAO;QAAEC,MAAM;QAAEC;MAAK,CAAC,GAAAL,KAAA;MAAO;MACvD,oBAAOP,OAAA,CAACF,IAAI;QAEZW,IAAI,EAAEA,IAAK,CAAC;QAAA;QACZC,OAAO,EAAEA,OAAQ;QACjBC,MAAM,EAAEA,MAAO;QACfC,KAAK,EAAEA,KAAM;QACbR,OAAO,EAAEA,CAAA,KAAMA,OAAO,CAACI,EAAE,CAAE,CAAC;MAAA,GALvBA,EAAE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAMA,CAAC;IACV,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEH,CAAC;AAET;AAACC,EAAA,GAlBQhB,KAAK;AAoBd,eAAeA,KAAK;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}